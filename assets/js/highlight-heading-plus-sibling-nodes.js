/**
 * @fileoverview Provides functionality to highlight headings and their following sibling nodes
 * when anchor links are clicked. This module uses event delegation to handle link clicks
 * and dynamically wraps content sections with highlighting divs.
 * 
 * @author Generated by AI Assistant
 * @version 1.0.0
 */

/**
 * Highlights a heading and its following sibling nodes until the next heading of the same level.
 * Only processes headings h2-h6, excluding h1 elements.
 * 
 * @param {string} anchor - The anchor string (e.g., "#linking-to-this-glossary")
 * @returns {boolean} True if highlighting was successful, false otherwise
 * 
 * @example
 * // Highlight heading with id "section-1" and its content
 * highlightHeadingSection("#section-1");
 * 
 * @example
 * // Use with anchor from URL hash
 * highlightHeadingSection(window.location.hash);
 */
function highlightHeadingSection(anchor) {
    // Validate input parameter
    if (!anchor || typeof anchor !== 'string' || !anchor.startsWith('#')) {
        console.warn('Invalid anchor provided:', anchor);
        return false;
    }

    // Remove existing highlights before adding new ones
    removeExistingHighlights();

    // Extract the element ID from the anchor
    const elementId = anchor.substring(1);
    const targetElement = document.getElementById(elementId);

    if (!targetElement) {
        console.warn('Element with ID not found:', elementId);
        return false;
    }

    // Check if the target element is a valid heading (h2-h6)
    const headingLevel = getHeadingLevel(targetElement);
    if (headingLevel === null) {
        return false;
    }

    // Find all sibling nodes until the next heading of the same level
    const nodesToHighlight = collectHeadingSiblings(targetElement, headingLevel);

    // Wrap the collected nodes with highlight div
    wrapNodesWithHighlight(nodesToHighlight);

    return true;
}

/**
 * Determines if an element is a heading and returns its level.
 * Only considers h2-h6 elements as valid headings.
 * 
 * @param {Element} element - The DOM element to check
 * @returns {number|null} The heading level (2-6) or null if not a valid heading
 * 
 * @example
 * const level = getHeadingLevel(document.querySelector('h3')); // Returns 3
 * const invalid = getHeadingLevel(document.querySelector('h1')); // Returns null
 */
function getHeadingLevel(element) {
    const tagName = element.tagName.toLowerCase();
    const headingMatch = tagName.match(/^h([2-6])$/);
    return headingMatch ? parseInt(headingMatch[1], 10) : null;
}

/**
 * Collects a heading element and all its following sibling nodes until the next
 * heading of the same or higher level in the hierarchy.
 * 
 * @param {Element} headingElement - The heading element to start from
 * @param {number} headingLevel - The level of the heading (2-6)
 * @returns {Element[]} Array of elements to be highlighted
 * 
 * @example
 * const h3Element = document.querySelector('#my-section');
 * const siblings = collectHeadingSiblings(h3Element, 3);
 * // Returns [h3Element, ...following siblings until next h3 or higher]
 */
function collectHeadingSiblings(headingElement, headingLevel) {
    const nodesToHighlight = [headingElement];
    let currentNode = headingElement.nextElementSibling;

    while (currentNode) {
        const currentHeadingLevel = getHeadingLevel(currentNode);
        
        // Stop if we encounter a heading of the same or higher level
        if (currentHeadingLevel !== null && currentHeadingLevel <= headingLevel) {
            break;
        }

        nodesToHighlight.push(currentNode);
        currentNode = currentNode.nextElementSibling;
    }

    return nodesToHighlight;
}

/**
 * Wraps a collection of DOM nodes with a highlighting div element.
 * Creates a div with class "highlight2" and moves all nodes inside it.
 * 
 * @param {Element[]} nodes - Array of DOM elements to wrap
 * @returns {Element|null} The created wrapper div or null if no nodes provided
 * 
 * @example
 * const nodes = [headingEl, paragraphEl, listEl];
 * const wrapper = wrapNodesWithHighlight(nodes);
 * // Creates: <div class="highlight2">...nodes...</div>
 */
function wrapNodesWithHighlight(nodes) {
    if (!nodes || nodes.length === 0) {
        return null;
    }

    // Create the highlight wrapper div
    const highlightDiv = document.createElement('div');
    highlightDiv.className = 'highlight2';

    // Insert the wrapper before the first node
    const firstNode = nodes[0];
    firstNode.parentNode.insertBefore(highlightDiv, firstNode);

    // Move all nodes into the wrapper
    nodes.forEach(node => {
        highlightDiv.appendChild(node);
    });

    return highlightDiv;
}

/**
 * Removes all existing highlight wrappers from the document.
 * This ensures only one section is highlighted at a time.
 * 
 * @returns {number} The number of highlight divs removed
 * 
 * @example
 * const removedCount = removeExistingHighlights();
 * console.log(`Removed ${removedCount} existing highlights`);
 */
function removeExistingHighlights() {
    const existingHighlights = document.querySelectorAll('.highlight2');
    let removedCount = 0;

    existingHighlights.forEach(highlight => {
        // Move all children back to the parent before removing the wrapper
        const parent = highlight.parentNode;
        while (highlight.firstChild) {
            parent.insertBefore(highlight.firstChild, highlight);
        }
        parent.removeChild(highlight);
        removedCount++;
    });

    return removedCount;
}

/**
 * Handles click events on anchor links and triggers heading highlighting.
 * Uses event delegation to handle dynamically added links.
 * 
 * @param {Event} event - The click event object
 * @returns {void}
 * 
 * @example
 * // This function is automatically called when anchor links are clicked
 * // due to the event delegation setup in initializeAnchorHighlighting()
 */
function handleAnchorClick(event) {
    const target = event.target;
    
    // Check if the clicked element is a link with an href containing a hash
    if (target.tagName.toLowerCase() !== 'a') {
        return;
    }

    const href = target.getAttribute('href');
    if (!href || !href.includes('#')) {
        return;
    }

    // Extract the anchor part from the href
    const anchorPart = href.substring(href.indexOf('#'));
    
    // Only process if it's an internal anchor (starts with #)
    if (anchorPart.startsWith('#') && anchorPart.length > 1) {
        // Small delay to allow browser navigation to complete
        setTimeout(() => {
            highlightHeadingSection(anchorPart);
        }, 100);
    }
}

/**
 * Initializes the anchor link highlighting functionality using event delegation.
 * Sets up a single click event listener on the document that handles all anchor clicks.
 * This approach is more efficient than attaching individual listeners to each link.
 * 
 * @returns {void}
 * 
 * @example
 * // Initialize the highlighting system
 * initializeAnchorHighlighting();
 * 
 * // Now all anchor links will automatically trigger highlighting
 * // when clicked, including dynamically added links
 */
function initializeAnchorHighlighting() {
    // Use event delegation to handle all anchor clicks
    document.addEventListener('click', handleAnchorClick);
    
    // Also handle direct navigation to anchors (e.g., page load with hash)
    if (window.location.hash) {
        // Delay to ensure DOM is fully loaded
        setTimeout(() => {
            highlightHeadingSection(window.location.hash);
        }, 200);
    }
    
    // Handle browser back/forward navigation
    window.addEventListener('hashchange', () => {
        if (window.location.hash) {
            highlightHeadingSection(window.location.hash);
        } else {
            removeExistingHighlights();
        }
    });
}

// Auto-initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAnchorHighlighting);
} else {
    // DOM is already loaded
    initializeAnchorHighlighting();
}

// Export functions for potential external use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        highlightHeadingSection,
        getHeadingLevel,
        collectHeadingSiblings,
        wrapNodesWithHighlight,
        removeExistingHighlights,
        initializeAnchorHighlighting
    };
}